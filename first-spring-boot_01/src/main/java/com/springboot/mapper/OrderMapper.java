package com.springboot.mapper;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import com.springboot.entity.Order;

@Mapper
public interface OrderMapper {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table t_order
	 *
	 * @mbg.generated Mon Dec 10 17:02:07 CST 2018
	 */
	@Delete({ "delete from t_order", "where order_id = #{orderId,jdbcType=VARCHAR}" })
	int deleteByPrimaryKey(String orderId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table t_order
	 *
	 * @mbg.generated Mon Dec 10 17:02:07 CST 2018
	 */
	@Insert({ "insert into t_order (order_id, userid, ", "sellid, create_time, ", "status, productid, ",
			"quantity, payment, ", "update_time, address_id, ", "confirm_time)",
			"values (#{orderId,jdbcType=VARCHAR}, #{userid,jdbcType=VARCHAR}, ",
			"#{sellid,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
			"#{status,jdbcType=VARCHAR}, #{productid,jdbcType=VARCHAR}, ",
			"#{quantity,jdbcType=INTEGER}, #{payment,jdbcType=DOUBLE}, ",
			"#{updateTime,jdbcType=TIMESTAMP}, #{addressId,jdbcType=VARCHAR}, ", "#{confirmTime,jdbcType=TIMESTAMP})" })
	int insert(Order record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table t_order
	 *
	 * @mbg.generated Mon Dec 10 17:02:07 CST 2018
	 */
	@Select({ "select", "order_id, userid, sellid, create_time, status, productid, quantity, payment, ",
			"update_time, address_id, confirm_time", "from t_order", "where order_id = #{orderId,jdbcType=VARCHAR}" })
	@Results({ @Result(column = "order_id", property = "orderId", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "userid", property = "userid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "sellid", property = "sellid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "productid", property = "productid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "quantity", property = "quantity", jdbcType = JdbcType.INTEGER),
			@Result(column = "payment", property = "payment", jdbcType = JdbcType.DOUBLE),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "address_id", property = "addressId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "confirm_time", property = "confirmTime", jdbcType = JdbcType.TIMESTAMP) })
	Order selectByPrimaryKey(String orderId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table t_order
	 *
	 * @mbg.generated Mon Dec 10 17:02:07 CST 2018
	 */
	@Select({ "select", "order_id, userid, sellid, create_time, status, productid, quantity, payment, ",
			"update_time, address_id, confirm_time", "from t_order" })
	@Results({ @Result(column = "order_id", property = "orderId", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "userid", property = "userid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "sellid", property = "sellid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "productid", property = "productid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "quantity", property = "quantity", jdbcType = JdbcType.INTEGER),
			@Result(column = "payment", property = "payment", jdbcType = JdbcType.DOUBLE),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "address_id", property = "addressId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "confirm_time", property = "confirmTime", jdbcType = JdbcType.TIMESTAMP) })
	List<Order> selectAll();

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table t_order
	 *
	 * @mbg.generated Mon Dec 10 17:02:07 CST 2018
	 */
	@Update({ "update t_order", "set userid = #{userid,jdbcType=VARCHAR},", "sellid = #{sellid,jdbcType=VARCHAR},",
			"create_time = #{createTime,jdbcType=TIMESTAMP},", "status = #{status,jdbcType=VARCHAR},",
			"productid = #{productid,jdbcType=VARCHAR},", "quantity = #{quantity,jdbcType=INTEGER},",
			"payment = #{payment,jdbcType=DOUBLE},", "update_time = #{updateTime,jdbcType=TIMESTAMP},",
			"address_id = #{addressId,jdbcType=VARCHAR},", "confirm_time = #{confirmTime,jdbcType=TIMESTAMP}",
			"where order_id = #{orderId,jdbcType=VARCHAR}" })
	int updateByPrimaryKey(Order record);

	@SelectProvider(type = com.springboot.entity.dyna.OrderDynaProvider.class, method = "selectProvider")
	@Results({ @Result(column = "order_id", property = "orderId", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "userid", property = "userid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "sellid", property = "sellid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "productid", property = "productid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "quantity", property = "quantity", jdbcType = JdbcType.INTEGER),
			@Result(column = "payment", property = "payment", jdbcType = JdbcType.DOUBLE),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "address_id", property = "addressId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "confirm_time", property = "confirmTime", jdbcType = JdbcType.TIMESTAMP) })
	List<Order> findList(Map<String, Object> map);

	@SelectProvider(type = com.springboot.entity.dyna.OrderDynaProvider.class, method = "updateProvider")
	int update(Map<String, Object> map);
}