package com.springboot.mapper;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import com.springboot.entity.OrderItem;
@Mapper
public interface OrderItemMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_order_item
     *
     * @mbggenerated Thu Mar 14 09:24:25 CST 2019
     */
    @Delete({
        "delete from t_order_item",
        "where order_id = #{orderId,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String orderId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_order_item
     *
     * @mbggenerated Thu Mar 14 09:24:25 CST 2019
     */
    @Insert({
        "insert into t_order_item (order_id, userid, ",
        "sellid, create_time, ",
        "status, productid, ",
        "quantity, payment, ",
        "update_time, address_id, ",
        "confirm_time, price)",
        "values (#{orderId,jdbcType=VARCHAR}, #{userid,jdbcType=VARCHAR}, ",
        "#{sellid,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
        "#{status,jdbcType=VARCHAR}, #{productid,jdbcType=VARCHAR}, ",
        "#{quantity,jdbcType=INTEGER}, #{payment,jdbcType=DOUBLE}, ",
        "#{updateTime,jdbcType=TIMESTAMP}, #{addressId,jdbcType=VARCHAR}, ",
        "#{confirmTime,jdbcType=TIMESTAMP}, #{price,jdbcType=DOUBLE})"
    })
    int insert(OrderItem record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_order_item
     *
     * @mbggenerated Thu Mar 14 09:24:25 CST 2019
     */
    @Select({
        "select",
        "order_id, userid, sellid, create_time, status, productid, quantity, payment, ",
        "update_time, address_id, confirm_time, price",
        "from t_order_item",
        "where order_id = #{orderId,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="userid", property="userid", jdbcType=JdbcType.VARCHAR),
        @Result(column="sellid", property="sellid", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="productid", property="productid", jdbcType=JdbcType.VARCHAR),
        @Result(column="quantity", property="quantity", jdbcType=JdbcType.INTEGER),
        @Result(column="payment", property="payment", jdbcType=JdbcType.DOUBLE),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="address_id", property="addressId", jdbcType=JdbcType.VARCHAR),
        @Result(column="confirm_time", property="confirmTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="price", property="price", jdbcType=JdbcType.DOUBLE)
    })
    OrderItem selectByPrimaryKey(String orderId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_order_item
     *
     * @mbggenerated Thu Mar 14 09:24:25 CST 2019
     */
    @Select({
        "select",
        "order_id, userid, sellid, create_time, status, productid, quantity, payment, ",
        "update_time, address_id, confirm_time, price",
        "from t_order_item"
    })
    @Results({
        @Result(column="order_id", property="orderId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="userid", property="userid", jdbcType=JdbcType.VARCHAR),
        @Result(column="sellid", property="sellid", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="productid", property="productid", jdbcType=JdbcType.VARCHAR),
        @Result(column="quantity", property="quantity", jdbcType=JdbcType.INTEGER),
        @Result(column="payment", property="payment", jdbcType=JdbcType.DOUBLE),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="address_id", property="addressId", jdbcType=JdbcType.VARCHAR),
        @Result(column="confirm_time", property="confirmTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="price", property="price", jdbcType=JdbcType.DOUBLE)
    })
    List<OrderItem> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_order_item
     *
     * @mbggenerated Thu Mar 14 09:24:25 CST 2019
     */
    @Update({
        "update t_order_item",
        "set userid = #{userid,jdbcType=VARCHAR},",
          "sellid = #{sellid,jdbcType=VARCHAR},",
          "create_time = #{createTime,jdbcType=TIMESTAMP},",
          "status = #{status,jdbcType=VARCHAR},",
          "productid = #{productid,jdbcType=VARCHAR},",
          "quantity = #{quantity,jdbcType=INTEGER},",
          "payment = #{payment,jdbcType=DOUBLE},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP},",
          "address_id = #{addressId,jdbcType=VARCHAR},",
          "confirm_time = #{confirmTime,jdbcType=TIMESTAMP},",
          "price = #{price,jdbcType=DOUBLE}",
        "where order_id = #{orderId,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(OrderItem record);
    
	@SelectProvider(type = com.springboot.entity.dyna.OrderDynaProvider.class, method = "selectProvider")
	@Results({ @Result(column = "order_id", property = "orderId", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "userid", property = "userid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "sellid", property = "sellid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "productid", property = "productid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "quantity", property = "quantity", jdbcType = JdbcType.INTEGER),
			@Result(column = "payment", property = "payment", jdbcType = JdbcType.DOUBLE),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "address_id", property = "addressId", jdbcType = JdbcType.VARCHAR),
			@Result(column = "confirm_time", property = "confirmTime", jdbcType = JdbcType.TIMESTAMP) })
	List<OrderItem> findList(Map<String, Object> map);

	@SelectProvider(type = com.springboot.entity.dyna.OrderDynaProvider.class, method = "updateProvider")
	Integer update(Map<String, Object> map);

	// 连表查询
	@SelectProvider(type = com.springboot.entity.dyna.OrderDynaProvider.class, method = "selectBySql")
	@Results({ @Result(column = "orderid", property = "orderid", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "create_time", property = "create_time", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "quantity", property = "quantity", jdbcType = JdbcType.INTEGER),
			@Result(column = "payment", property = "payment", jdbcType = JdbcType.DOUBLE),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
			@Result(column = "name", property = "name", jdbcType = JdbcType.VARCHAR),
			@Result(column = "price", property = "price", jdbcType = JdbcType.DOUBLE),
			@Result(column = "img", property = "img", jdbcType = JdbcType.VARCHAR),
			@Result(column = "img", property = "img", jdbcType = JdbcType.VARCHAR),
			@Result(column = "addrid", property = "addrid", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "userid", property = "userid", jdbcType = JdbcType.VARCHAR),
			@Result(column = "province", property = "province", jdbcType = JdbcType.VARCHAR),
			@Result(column = "city", property = "city", jdbcType = JdbcType.VARCHAR),
			@Result(column = "region", property = "region", jdbcType = JdbcType.VARCHAR),
			@Result(column = "address", property = "address", jdbcType = JdbcType.VARCHAR),
			@Result(column = "postal", property = "postal", jdbcType = JdbcType.VARCHAR),
			@Result(column = "consignee", property = "consignee", jdbcType = JdbcType.VARCHAR) })
	List<Map<String, Object>> findListBy(Map<String, Object> map);
}